#include <pcap.h>
#include <iostream>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>

int total_fwd_packets = 0;
int total_bwd_packets = 0;

void packetHandler(u_char *userData, const struct pcap_pkthdr* pkthdr, const u_char* packet) {
    struct ip *ip_header = (struct ip*)(packet + sizeof(struct ether_header));

    std::cout << "Pacote Capturado! Tamanho: " << pkthdr->len << " bytes\n";
    std::cout << "Origem: " << inet_ntoa(ip_header->ip_src) << "\n";
    std::cout << "Destino: " << inet_ntoa(ip_header->ip_dst) << "\n";
    
    if (ip_header->ip_p == IPPROTO_TCP) {
        std::cout << "Protocolo: TCP\n";
        total_fwd_packets++;
    } else if (ip_header->ip_p == IPPROTO_UDP) {
        std::cout << "Protocolo: UDP\n";
        total_bwd_packets++;
    }

    std::cout << "Pacotes Enviados: " << total_fwd_packets << "\n";
    std::cout << "Pacotes Recebidos: " << total_bwd_packets << "\n\n";
}

int main() {
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_if_t *alldevs;

    if (pcap_findalldevs(&alldevs, errbuf) == -1) {
        std::cerr << "Erro ao obter interfaces: " << errbuf << std::endl;
        return 1;
    }

    pcap_t* handle = pcap_open_live(alldevs->name, BUFSIZ, 1, 1000, errbuf);
    if (!handle) {
        std::cerr << "Erro ao abrir interface\n";
        return 1;
    }

    pcap_loop(handle, 0, packetHandler, nullptr);

    pcap_close(handle);
    pcap_freealldevs(alldevs);

    return 0;
}

